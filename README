
File: ex4a1.c ex4a2.c
Generate and Collect Primes from Named Pipe
=====================================================================
Written by: Tali Kalev, ID:208629691, Login: talikal
		and	Noga Levy, ID:315260927, Login: levyno

This program runs with 4 different processes. Three processes that generates
random numbers, when the number is prime the process sends it to main process via named pipe.
And one process - the main process that collect the primes sent from the other processes
via named pipe and insert them into array, when the main process gets 10000 primes,
alert to the 3 other process to end, prints the minimum prime, max prime and number of
different numbers in the array, close all named pipe, prints data and finishes.
when the other processes get the message from main process to end they print the
prime number they send the most to main process, and finish.

Compile: gcc -Wall ex4a1.c -o ex4a1
         gcc -Wall ex4a2.c -o ex4a2
     (ex4a1 = main process, ex4a2 = sub process)

Run: for start run the main process with the 4 named pipe names.
    Then, run 3 times the sub processes and send to the vector
    arguments the main named pipe 'fifo0' and the number of process (1-3):
        ./ex4a1 fifo0 fifo1 fifo2 fifo3
        ./ex4a2 fifo0 1
        ./ex4a2 fifo0 2
        ./ex4a2 fifo0 3

Input: No Input

Output:
    From main process (ex4a1) = minimum prime, max prime and number of
    different numbers in the array.
    Example: The number of different primes received is: 168
             The max prime is: 997. The min primes is: 2
    From sub process (ex4a2) = prime number they send the most to main process
    Example: Process 1101373 sent the prime 233, 14 times

File: ex4b1.c ex4b2.c
Generate and Collect Primes from Message Queue
=====================================================================
Written by: Tali Kalev, ID:208629691, Login: talikal
		and	Noga Levy, ID:315260927, Login: levyno

This program runs with 4 different processes. Three processes that generates
random numbers, when the number is prime the process sends it to main process via message queue.
And one process - the main process that collect the primes sent from the other processes
via message queue and insert them into array, when the main process gets 10000 primes,
alert to the 3 other process to end, prints the minimum prime, max prime and number of
different numbers in the array, close message queue, prints data and finishes.
when the other processes get the message from main process to end they print the
prime number they send the most to main process, and finish.

Compile: gcc -Wall ex4b1.c -o ex4b1
         gcc -Wall ex4b2.c -o ex4b2
     (ex4b1 = main process, ex4b2 = sub process)

Run: for start run the main process.
    Then, run 3 times the sub processes and send to the vector
    arguments the number of process (1-3):
        ./ex4b1
        ./ex4b2 1
        ./ex4b2 2
        ./ex4b2 3

Input: No Input

Output:
    From main process (ex4b1) = minimum prime, max prime and number of
    different numbers in the array.
    Example: The number of different primes received is: 168
             The max prime is: 997. The min primes is: 2
    From sub process (ex4b2) = prime number they send the most to main process
    Example: Process 1101373 sent the prime 233, 14 times

File: ex4c1.c ex4c2.c ex4c3.c
Interactions Between Registry, Application and Customer
=====================================================================
Written by: Tali Kalev, ID:208629691, Login: talikal
		and	Noga Levy, ID:315260927, Login: levyno

This program allows a customer to register via a registry server and then
use the tools given in the application server via message queue.

In the Registry Server: customers and the application server can request
via the message queue to either be added to the registry, check if they
are in the registry already and to be removed from the registry.

In the Application server: customers can request via message Queue to check
if an integer is prime or if a string is a palindrome. Before completing these
requests from the customer, the application server checks with the registry
server if the customer exists already in the registry.

The customer begins by registering via message queue. After that, the customer
reads from the user either an integer or a string and checks whether it is
a prime or palindrome respectively via message queue with the application
server. The customer prints the result on the screen. When the customer is done
it requests to remove itself from the registry.

Compile: gcc -Wall ex4c1.c -o ex4c1
         gcc -Wall ex4c2.c -o ex4c2
				 gcc -Wall ex4c3.c -o ex4c3
     (ex4c1 = registry server, ex4c2 = application server, ex4c3.c = customer)

Run: First, run registry server, then application server and then as many
		customers as desired (here just 1):
			./ex4c1
			./ex4c2
			./ex4c3

Input: The registry server and application server require no input.
			The customer requires input of either 'n' 's' or 'e'. If 'n' then
			an integer. If 's' then a string ('e' removes from registry and exits).
			Example:
				n
				7

Output: The registry server and application server have no output.
				The customer will print the result of its request depending on the
				user input. If the input is as above, the output will be:
				Example:
				7 is a prime.
